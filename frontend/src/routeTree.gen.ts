/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as NotificationsRouteImport } from './routes/notifications/route'
import { Route as AuthRouteImport } from './routes/auth/route'
import { Route as IndexImport } from './routes/index'
import { Route as SettingsIndexImport } from './routes/settings/index'
import { Route as ProfileIndexImport } from './routes/profile/index'
import { Route as ChatIndexImport } from './routes/chat/index'
import { Route as AuthVerifyEmailImport } from './routes/auth/verify-email'
import { Route as AuthTestSignupImport } from './routes/auth/test-signup'
import { Route as AuthSignupImport } from './routes/auth/signup'
import { Route as AuthResetPasswordImport } from './routes/auth/reset-password'
import { Route as AuthLoginImport } from './routes/auth/login'
import { Route as AuthForgotPasswordImport } from './routes/auth/forgot-password'
import { Route as NotificationsOthersIndexImport } from './routes/notifications/others/index'
import { Route as NotificationsFriendRequestsIndexImport } from './routes/notifications/friend-requests/index'

// Create/Update Routes

const NotificationsRouteRoute = NotificationsRouteImport.update({
  id: '/notifications',
  path: '/notifications',
  getParentRoute: () => rootRoute,
} as any)

const AuthRouteRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsIndexRoute = SettingsIndexImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => rootRoute,
} as any)

const ProfileIndexRoute = ProfileIndexImport.update({
  id: '/profile/',
  path: '/profile/',
  getParentRoute: () => rootRoute,
} as any)

const ChatIndexRoute = ChatIndexImport.update({
  id: '/chat/',
  path: '/chat/',
  getParentRoute: () => rootRoute,
} as any)

const AuthVerifyEmailRoute = AuthVerifyEmailImport.update({
  id: '/verify-email',
  path: '/verify-email',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthTestSignupRoute = AuthTestSignupImport.update({
  id: '/test-signup',
  path: '/test-signup',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthSignupRoute = AuthSignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthResetPasswordRoute = AuthResetPasswordImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthForgotPasswordRoute = AuthForgotPasswordImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => AuthRouteRoute,
} as any)

const NotificationsOthersIndexRoute = NotificationsOthersIndexImport.update({
  id: '/others/',
  path: '/others/',
  getParentRoute: () => NotificationsRouteRoute,
} as any)

const NotificationsFriendRequestsIndexRoute =
  NotificationsFriendRequestsIndexImport.update({
    id: '/friend-requests/',
    path: '/friend-requests/',
    getParentRoute: () => NotificationsRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRoute
    }
    '/notifications': {
      id: '/notifications'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof NotificationsRouteImport
      parentRoute: typeof rootRoute
    }
    '/auth/forgot-password': {
      id: '/auth/forgot-password'
      path: '/forgot-password'
      fullPath: '/auth/forgot-password'
      preLoaderRoute: typeof AuthForgotPasswordImport
      parentRoute: typeof AuthRouteImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof AuthRouteImport
    }
    '/auth/reset-password': {
      id: '/auth/reset-password'
      path: '/reset-password'
      fullPath: '/auth/reset-password'
      preLoaderRoute: typeof AuthResetPasswordImport
      parentRoute: typeof AuthRouteImport
    }
    '/auth/signup': {
      id: '/auth/signup'
      path: '/signup'
      fullPath: '/auth/signup'
      preLoaderRoute: typeof AuthSignupImport
      parentRoute: typeof AuthRouteImport
    }
    '/auth/test-signup': {
      id: '/auth/test-signup'
      path: '/test-signup'
      fullPath: '/auth/test-signup'
      preLoaderRoute: typeof AuthTestSignupImport
      parentRoute: typeof AuthRouteImport
    }
    '/auth/verify-email': {
      id: '/auth/verify-email'
      path: '/verify-email'
      fullPath: '/auth/verify-email'
      preLoaderRoute: typeof AuthVerifyEmailImport
      parentRoute: typeof AuthRouteImport
    }
    '/chat/': {
      id: '/chat/'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof ChatIndexImport
      parentRoute: typeof rootRoute
    }
    '/profile/': {
      id: '/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileIndexImport
      parentRoute: typeof rootRoute
    }
    '/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexImport
      parentRoute: typeof rootRoute
    }
    '/notifications/friend-requests/': {
      id: '/notifications/friend-requests/'
      path: '/friend-requests'
      fullPath: '/notifications/friend-requests'
      preLoaderRoute: typeof NotificationsFriendRequestsIndexImport
      parentRoute: typeof NotificationsRouteImport
    }
    '/notifications/others/': {
      id: '/notifications/others/'
      path: '/others'
      fullPath: '/notifications/others'
      preLoaderRoute: typeof NotificationsOthersIndexImport
      parentRoute: typeof NotificationsRouteImport
    }
  }
}

// Create and export the route tree

interface AuthRouteRouteChildren {
  AuthForgotPasswordRoute: typeof AuthForgotPasswordRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthResetPasswordRoute: typeof AuthResetPasswordRoute
  AuthSignupRoute: typeof AuthSignupRoute
  AuthTestSignupRoute: typeof AuthTestSignupRoute
  AuthVerifyEmailRoute: typeof AuthVerifyEmailRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthForgotPasswordRoute: AuthForgotPasswordRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthResetPasswordRoute: AuthResetPasswordRoute,
  AuthSignupRoute: AuthSignupRoute,
  AuthTestSignupRoute: AuthTestSignupRoute,
  AuthVerifyEmailRoute: AuthVerifyEmailRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface NotificationsRouteRouteChildren {
  NotificationsFriendRequestsIndexRoute: typeof NotificationsFriendRequestsIndexRoute
  NotificationsOthersIndexRoute: typeof NotificationsOthersIndexRoute
}

const NotificationsRouteRouteChildren: NotificationsRouteRouteChildren = {
  NotificationsFriendRequestsIndexRoute: NotificationsFriendRequestsIndexRoute,
  NotificationsOthersIndexRoute: NotificationsOthersIndexRoute,
}

const NotificationsRouteRouteWithChildren =
  NotificationsRouteRoute._addFileChildren(NotificationsRouteRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/notifications': typeof NotificationsRouteRouteWithChildren
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/reset-password': typeof AuthResetPasswordRoute
  '/auth/signup': typeof AuthSignupRoute
  '/auth/test-signup': typeof AuthTestSignupRoute
  '/auth/verify-email': typeof AuthVerifyEmailRoute
  '/chat': typeof ChatIndexRoute
  '/profile': typeof ProfileIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/notifications/friend-requests': typeof NotificationsFriendRequestsIndexRoute
  '/notifications/others': typeof NotificationsOthersIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/notifications': typeof NotificationsRouteRouteWithChildren
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/reset-password': typeof AuthResetPasswordRoute
  '/auth/signup': typeof AuthSignupRoute
  '/auth/test-signup': typeof AuthTestSignupRoute
  '/auth/verify-email': typeof AuthVerifyEmailRoute
  '/chat': typeof ChatIndexRoute
  '/profile': typeof ProfileIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/notifications/friend-requests': typeof NotificationsFriendRequestsIndexRoute
  '/notifications/others': typeof NotificationsOthersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/notifications': typeof NotificationsRouteRouteWithChildren
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/reset-password': typeof AuthResetPasswordRoute
  '/auth/signup': typeof AuthSignupRoute
  '/auth/test-signup': typeof AuthTestSignupRoute
  '/auth/verify-email': typeof AuthVerifyEmailRoute
  '/chat/': typeof ChatIndexRoute
  '/profile/': typeof ProfileIndexRoute
  '/settings/': typeof SettingsIndexRoute
  '/notifications/friend-requests/': typeof NotificationsFriendRequestsIndexRoute
  '/notifications/others/': typeof NotificationsOthersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/notifications'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/reset-password'
    | '/auth/signup'
    | '/auth/test-signup'
    | '/auth/verify-email'
    | '/chat'
    | '/profile'
    | '/settings'
    | '/notifications/friend-requests'
    | '/notifications/others'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/notifications'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/reset-password'
    | '/auth/signup'
    | '/auth/test-signup'
    | '/auth/verify-email'
    | '/chat'
    | '/profile'
    | '/settings'
    | '/notifications/friend-requests'
    | '/notifications/others'
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/notifications'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/reset-password'
    | '/auth/signup'
    | '/auth/test-signup'
    | '/auth/verify-email'
    | '/chat/'
    | '/profile/'
    | '/settings/'
    | '/notifications/friend-requests/'
    | '/notifications/others/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  NotificationsRouteRoute: typeof NotificationsRouteRouteWithChildren
  ChatIndexRoute: typeof ChatIndexRoute
  ProfileIndexRoute: typeof ProfileIndexRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  NotificationsRouteRoute: NotificationsRouteRouteWithChildren,
  ChatIndexRoute: ChatIndexRoute,
  ProfileIndexRoute: ProfileIndexRoute,
  SettingsIndexRoute: SettingsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/auth",
        "/notifications",
        "/chat/",
        "/profile/",
        "/settings/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/auth": {
      "filePath": "auth/route.tsx",
      "children": [
        "/auth/forgot-password",
        "/auth/login",
        "/auth/reset-password",
        "/auth/signup",
        "/auth/test-signup",
        "/auth/verify-email"
      ]
    },
    "/notifications": {
      "filePath": "notifications/route.tsx",
      "children": [
        "/notifications/friend-requests/",
        "/notifications/others/"
      ]
    },
    "/auth/forgot-password": {
      "filePath": "auth/forgot-password.tsx",
      "parent": "/auth"
    },
    "/auth/login": {
      "filePath": "auth/login.tsx",
      "parent": "/auth"
    },
    "/auth/reset-password": {
      "filePath": "auth/reset-password.tsx",
      "parent": "/auth"
    },
    "/auth/signup": {
      "filePath": "auth/signup.tsx",
      "parent": "/auth"
    },
    "/auth/test-signup": {
      "filePath": "auth/test-signup.tsx",
      "parent": "/auth"
    },
    "/auth/verify-email": {
      "filePath": "auth/verify-email.tsx",
      "parent": "/auth"
    },
    "/chat/": {
      "filePath": "chat/index.tsx"
    },
    "/profile/": {
      "filePath": "profile/index.tsx"
    },
    "/settings/": {
      "filePath": "settings/index.tsx"
    },
    "/notifications/friend-requests/": {
      "filePath": "notifications/friend-requests/index.tsx",
      "parent": "/notifications"
    },
    "/notifications/others/": {
      "filePath": "notifications/others/index.tsx",
      "parent": "/notifications"
    }
  }
}
ROUTE_MANIFEST_END */
