/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as NotificationsRouteImport } from './routes/notifications/route'
import { Route as AuthRouteImport } from './routes/auth/route'
import { Route as IndexImport } from './routes/index'
import { Route as SettingsIndexImport } from './routes/settings/index'
import { Route as ProfilieIndexImport } from './routes/profilie/index'
import { Route as ChatIndexImport } from './routes/chat/index'
import { Route as AuthSignupImport } from './routes/auth/signup'
import { Route as AuthLoginImport } from './routes/auth/login'
import { Route as NotificationsOthersIndexImport } from './routes/notifications/others/index'
import { Route as NotificationsFriendRequestsIndexImport } from './routes/notifications/friend-requests/index'

// Create/Update Routes

const NotificationsRouteRoute = NotificationsRouteImport.update({
  id: '/notifications',
  path: '/notifications',
  getParentRoute: () => rootRoute,
} as any)

const AuthRouteRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsIndexRoute = SettingsIndexImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => rootRoute,
} as any)

const ProfilieIndexRoute = ProfilieIndexImport.update({
  id: '/profilie/',
  path: '/profilie/',
  getParentRoute: () => rootRoute,
} as any)

const ChatIndexRoute = ChatIndexImport.update({
  id: '/chat/',
  path: '/chat/',
  getParentRoute: () => rootRoute,
} as any)

const AuthSignupRoute = AuthSignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRouteRoute,
} as any)

const NotificationsOthersIndexRoute = NotificationsOthersIndexImport.update({
  id: '/others/',
  path: '/others/',
  getParentRoute: () => NotificationsRouteRoute,
} as any)

const NotificationsFriendRequestsIndexRoute =
  NotificationsFriendRequestsIndexImport.update({
    id: '/friend-requests/',
    path: '/friend-requests/',
    getParentRoute: () => NotificationsRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRoute
    }
    '/notifications': {
      id: '/notifications'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof NotificationsRouteImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof AuthRouteImport
    }
    '/auth/signup': {
      id: '/auth/signup'
      path: '/signup'
      fullPath: '/auth/signup'
      preLoaderRoute: typeof AuthSignupImport
      parentRoute: typeof AuthRouteImport
    }
    '/chat/': {
      id: '/chat/'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof ChatIndexImport
      parentRoute: typeof rootRoute
    }
    '/profilie/': {
      id: '/profilie/'
      path: '/profilie'
      fullPath: '/profilie'
      preLoaderRoute: typeof ProfilieIndexImport
      parentRoute: typeof rootRoute
    }
    '/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexImport
      parentRoute: typeof rootRoute
    }
    '/notifications/friend-requests/': {
      id: '/notifications/friend-requests/'
      path: '/friend-requests'
      fullPath: '/notifications/friend-requests'
      preLoaderRoute: typeof NotificationsFriendRequestsIndexImport
      parentRoute: typeof NotificationsRouteImport
    }
    '/notifications/others/': {
      id: '/notifications/others/'
      path: '/others'
      fullPath: '/notifications/others'
      preLoaderRoute: typeof NotificationsOthersIndexImport
      parentRoute: typeof NotificationsRouteImport
    }
  }
}

// Create and export the route tree

interface AuthRouteRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
  AuthSignupRoute: typeof AuthSignupRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthSignupRoute: AuthSignupRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface NotificationsRouteRouteChildren {
  NotificationsFriendRequestsIndexRoute: typeof NotificationsFriendRequestsIndexRoute
  NotificationsOthersIndexRoute: typeof NotificationsOthersIndexRoute
}

const NotificationsRouteRouteChildren: NotificationsRouteRouteChildren = {
  NotificationsFriendRequestsIndexRoute: NotificationsFriendRequestsIndexRoute,
  NotificationsOthersIndexRoute: NotificationsOthersIndexRoute,
}

const NotificationsRouteRouteWithChildren =
  NotificationsRouteRoute._addFileChildren(NotificationsRouteRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/notifications': typeof NotificationsRouteRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/auth/signup': typeof AuthSignupRoute
  '/chat': typeof ChatIndexRoute
  '/profilie': typeof ProfilieIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/notifications/friend-requests': typeof NotificationsFriendRequestsIndexRoute
  '/notifications/others': typeof NotificationsOthersIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/notifications': typeof NotificationsRouteRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/auth/signup': typeof AuthSignupRoute
  '/chat': typeof ChatIndexRoute
  '/profilie': typeof ProfilieIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/notifications/friend-requests': typeof NotificationsFriendRequestsIndexRoute
  '/notifications/others': typeof NotificationsOthersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/notifications': typeof NotificationsRouteRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/auth/signup': typeof AuthSignupRoute
  '/chat/': typeof ChatIndexRoute
  '/profilie/': typeof ProfilieIndexRoute
  '/settings/': typeof SettingsIndexRoute
  '/notifications/friend-requests/': typeof NotificationsFriendRequestsIndexRoute
  '/notifications/others/': typeof NotificationsOthersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/notifications'
    | '/auth/login'
    | '/auth/signup'
    | '/chat'
    | '/profilie'
    | '/settings'
    | '/notifications/friend-requests'
    | '/notifications/others'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/notifications'
    | '/auth/login'
    | '/auth/signup'
    | '/chat'
    | '/profilie'
    | '/settings'
    | '/notifications/friend-requests'
    | '/notifications/others'
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/notifications'
    | '/auth/login'
    | '/auth/signup'
    | '/chat/'
    | '/profilie/'
    | '/settings/'
    | '/notifications/friend-requests/'
    | '/notifications/others/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  NotificationsRouteRoute: typeof NotificationsRouteRouteWithChildren
  ChatIndexRoute: typeof ChatIndexRoute
  ProfilieIndexRoute: typeof ProfilieIndexRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  NotificationsRouteRoute: NotificationsRouteRouteWithChildren,
  ChatIndexRoute: ChatIndexRoute,
  ProfilieIndexRoute: ProfilieIndexRoute,
  SettingsIndexRoute: SettingsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/auth",
        "/notifications",
        "/chat/",
        "/profilie/",
        "/settings/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/auth": {
      "filePath": "auth/route.tsx",
      "children": [
        "/auth/login",
        "/auth/signup"
      ]
    },
    "/notifications": {
      "filePath": "notifications/route.tsx",
      "children": [
        "/notifications/friend-requests/",
        "/notifications/others/"
      ]
    },
    "/auth/login": {
      "filePath": "auth/login.tsx",
      "parent": "/auth"
    },
    "/auth/signup": {
      "filePath": "auth/signup.tsx",
      "parent": "/auth"
    },
    "/chat/": {
      "filePath": "chat/index.tsx"
    },
    "/profilie/": {
      "filePath": "profilie/index.tsx"
    },
    "/settings/": {
      "filePath": "settings/index.tsx"
    },
    "/notifications/friend-requests/": {
      "filePath": "notifications/friend-requests/index.tsx",
      "parent": "/notifications"
    },
    "/notifications/others/": {
      "filePath": "notifications/others/index.tsx",
      "parent": "/notifications"
    }
  }
}
ROUTE_MANIFEST_END */
