generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  email          String   @unique
  hashedPassword String

  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")

  friendsInitiated Friend[] @relation("UserFriendsInitiated")
  friendsReceived  Friend[] @relation("UserFriendsReceived")

  RequestSent     Request[]      @relation("SentRequests")
  RequestReceived Request[]      @relation("ReceivedRequests")
  Notification    Notification[]
}

model Message {
  id           String   @id @default(uuid())
  senderId     String
  receiverId   String
  date_created DateTime @default(now())
  date_updated DateTime @updatedAt
  mesasge      String

  sender   User @relation("SentMessages", fields: [senderId], references: [email])
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [email])
}

model Friend {
  id          String @id @default(uuid())
  userEmail   String
  friendEmail String
  status      Status @default(OFFLINE)

  user   User @relation("UserFriendsInitiated", fields: [userEmail], references: [email])
  friend User @relation("UserFriendsReceived", fields: [friendEmail], references: [email])

  @@unique([userEmail, friendEmail])
}

model Request {
  id               String        @id @default(uuid())
  requesterEmail   String
  requestedToEmail String
  status           RequestStatus @default(PENDING)
  requester        User          @relation("SentRequests", fields: [requesterEmail], references: [email])
  requestedTo      User          @relation("ReceivedRequests", fields: [requestedToEmail], references: [email])
  dateSent         DateTime      @default(now())
  dateResponded    DateTime      @updatedAt

  @@unique([requesterEmail, requestedToEmail])
}

model Notification {
  id         String   @id @default(uuid())
  title      String
  message    String
  email      String
  user       User     @relation(fields: [email], references: [email])
  receivedAt DateTime @default(now())
}

model TemporaryUser {
  id             String   @id @default(uuid())
  email          String   @unique
  createdAt      DateTime @default(now())
  hashedPassword String
}

enum Status {
  ONLINE
  OFFLINE
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}
